name: Deploy to DigitalOcean

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  REGISTRY: registry.digitalocean.com/stellarcare
  IMAGE_NAME: stellarcare

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Log in to DO Container Registry
        run: doctl registry login --expiry-seconds 600

      - name: Build and push API image
        run: |
          docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:api-latest -f backend/Dockerfile backend
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:api-latest

      - name: Build and push Web image
        run: |
          docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:web-latest -f frontend/Dockerfile frontend
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:web-latest

      - name: Create SSH key
        run: |
          mkdir -p ~/.ssh/
          echo "${{ secrets.DROPLET_SSH_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H ${{ secrets.DROPLET_HOST }} >> ~/.ssh/known_hosts

      - name: Create directory structure on droplet
        run: |
          ssh -i ~/.ssh/deploy_key ${{ secrets.DROPLET_USERNAME }}@${{ secrets.DROPLET_HOST }} '
            mkdir -p /opt/stellarcare/backend
          '

      - name: Copy files to droplet
        run: |
          scp -i ~/.ssh/deploy_key docker-compose.prod.yaml ${{ secrets.DROPLET_USERNAME }}@${{ secrets.DROPLET_HOST }}:/opt/stellarcare/docker-compose.yaml
          scp -i ~/.ssh/deploy_key backend/.env.example ${{ secrets.DROPLET_USERNAME }}@${{ secrets.DROPLET_HOST }}:/opt/stellarcare/backend/.env

      - name: Deploy to DigitalOcean
        run: |
          ssh -i ~/.ssh/deploy_key ${{ secrets.DROPLET_USERNAME }}@${{ secrets.DROPLET_HOST }} '
            cd /opt/stellarcare
            echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> backend/.env
            docker compose pull
            docker compose down
            docker compose up -d
          '
