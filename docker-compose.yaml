services:
  db:
    image: postgres
    expose:
      - "5432"
    ports:
      - "${DB_PORT:-5432}:5432"
    environment:
      POSTGRES_PASSWORD: "change-password"
      POSTGRES_DB: "db"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 2s
      timeout: 2s
      retries: 10
  setup:
    build:
      context: backend
    command: >
      bash -c "
        uv sync &&
        uv run -- python manage.py makemigrations &&
        uv run -- python manage.py migrate &&
        uv run -- python manage.py createsuperuser --noinput || true &&
        for i in {1..5}; do
          uv run -- python manage.py generate_mock_data || true;
        done
      "
    env_file:
      - .env.backend
    depends_on:
      db:
        condition: service_healthy
    restart: "no"
  api:
    command: >
      bash -c "
        uv sync &&
        uv run -- python manage.py runserver 0.0.0.0:${API_PORT:-8000}
      "
    build:
      context: backend
    expose:
      - "${API_PORT:-8000}"
    ports:
      - "${API_PORT:-8000}:${API_PORT:-8000}"
    env_file:
      - .env.backend
    environment:
      - SERVER_HOST=${SERVER_IP:-localhost}
      - API_PORT=${API_PORT:-8000}
    depends_on:
      db:
        condition: service_healthy
      setup:
        condition: service_completed_successfully
  web:
    command: bash -c "pnpm install && if [ \"$$BUILD_ENV\" = \"production\" ]; then pnpm build && pnpm start; else pnpm dev; fi"
    build:
      context: frontend
    expose:
      - "${WEB_PORT:-3000}"
    ports:
      - "${WEB_PORT:-3000}:${WEB_PORT:-3000}"
    env_file:
      - .env.frontend
    environment:
      - BUILD_ENV=${BUILD_ENV:-development}
      - API_URL=http://${SERVER_IP:-localhost}:${API_PORT:-8000}
    depends_on:
      - api
